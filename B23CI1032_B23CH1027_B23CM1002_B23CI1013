//ICS_CP_-DARQ
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <windows.h>
#include <time.h>
#define WALL '#'
#define PACMAN 'C'
#define DOT '.'
#define GHOST '&'
#define OBSTACLE 'X'
int pastghostX[4],pastghostY[4];
int numObstacles;
int obstacleX[20*20];
int obstacleY[20*20];
int ghostX[4], ghostY[4]; // we can replace 4 to x where x will be number of ghosts
char board[20][20];
int pacmanX, pacmanY;
int numDots;
int score;
void welcomeScreen() {
//this function is for the first appearance of game 
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);// used  for colour change
    system("cls");//terminal screen ko clear karne ke liye 

    SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
 


    printf(" ____      _      ____    __  __     _     _   _ \n");
    printf("|  _ \\    / \\    / ___|  |  \\/  |   / \\   | \\ | |\n");
    printf("| |_) |  / _ \\  | |      | |\\/| |  / _ \\  |  \\| |\n");
    printf("|  __/  / ___ \\ | |___   | |  | | / ___ \\ | |\\  |\n");
    printf("|_|    /_/   \\_\\ \\____|  |_|  |_|/_/   \\_\\|_| \\_|\n\n\n");

  
    printf("Eat the dots and avoid ghosts,opstacle to score points.\n");
    printf("Welcome to the Pacman Game! Press any key to play.\n");
    SetConsoleTextAttribute(hConsole, FOREGROUND_INTENSITY | FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE);
    //printf("Welcome to the Pacman Game! Press any key to play.\n");
    getch();//keyboard se koi bhi key input lene ke liye 
}
void setupBoard() {
    int i, j;
    for (i = 0; i < 20; i++)
     {
        for (j = 0; j < 20; j++) 
        {
            if (i == 0 || i == 20 - 1 || j == 0 || j == 20 - 1)
             {
                board[i][j] = WALL;
             } else 
             {
                board[i][j] = DOT;
             }
        }
     }

//To place obstacle on board
    numObstacles = 20 * 20 / 10;

    for (i = 0; i < numObstacles; i++)
    {
        int x = rand() % (20 - 2) + 1;
        int y = rand() % (20 - 2) + 1;

        board[x][y] = OBSTACLE;
        obstacleX[i] = x;
        obstacleY[i] = y;
    }

   //To display pacman (c in yellow colour) on the screen
    do 
    {
        pacmanX = rand() % (20 - 2) + 1;
        pacmanY = rand() % (20 - 2) + 1;
    } 
    while (board[pacmanX][pacmanY] != DOT);

    board[pacmanX][pacmanY] = PACMAN;

    //to display ghost(& in red colour)  on the screen.
    for (i = 0; i < 4; i++)
     {
        do 
        {
            ghostX[i] = rand() % (20 - 2) + 1;
            ghostY[i] = rand() % (20 - 2) + 1;
            pastghostX[i]=ghostX[i];
            pastghostY[i]=ghostY[i];
        }
         while (board[ghostX[i]][ghostY[i]] != DOT && (ghostX[i] != pacmanX || ghostY[i] != pacmanY));

        board[ghostX[i]][ghostY[i]] = GHOST;
    }

   // To create a collection of pacman characters and assign points to them
    numDots = 20*20 - numObstacles - 2;
    score = 0;
}

void drawBoard() 
{
    int i, j;
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    system("cls"); //To console screen clear 

    for (i = 0; i < 20; i++) 
    {
        for (j = 0; j < 20; j++)
         {
            if (board[i][j] == PACMAN) 
            {
                SetConsoleTextAttribute(hConsole, 6); //  yellow
            } 
            else if (board[i][j] == GHOST) 
            {
                SetConsoleTextAttribute(hConsole, 12); //  red colour
            } 
            else if (board[i][j] == OBSTACLE) 
            {
                SetConsoleTextAttribute(hConsole, 5); //  purple colour
            } 
            else if (board[i][j] == WALL ) 
            {
                SetConsoleTextAttribute(hConsole, 2); //  green colour
            } 
              else 
            {
                SetConsoleTextAttribute(hConsole, 15); //  white colour 
            }

            printf("%c ", board[i][j]);//print whole board setup
        }
        printf("\n");
    }

    SetConsoleTextAttribute(hConsole, 15); //  To reset the color to white

    printf("Score: %d\n", score);
    printf("Use  arrow keys to move Pacman\n");
    printf("you have to escape from X and &");
}

void updateBoard(int newX, int newY,int p) 
{
   
    if (board[newX][newY] == OBSTACLE) 
    {
        printf("\nGame Over! andho ki tarah na chale (you hit #)!\n");
        exit(0);//exit from whole code
    }

    //To express whether ghost has caught the pacman or not
    for (int i = 0; i < 4; i++)
     {
        if (newX == ghostX[i] && newY == ghostY[i])
         {
            printf("\nGame Over! Ghost se bach paan namunkin h!\n");
            exit(0);
         }
     }

   //For moving pacman forward
    board[pacmanX][pacmanY] = ' ';
    pacmanX = newX;
    pacmanY = newY;

    if (board[pacmanX][pacmanY] == DOT) 
    {
        score++;
        numDots--;
    }

    board[pacmanX][pacmanY] = PACMAN;
//To chase the pacman by the gost 
    for (int i = 0; i < 4; i++) 
    {
        int newGhostX = ghostX[i];
        int newGhostY = ghostY[i];
    if(p%4==0)  //If in p%x we increase x then game will be easy and if we decrease x level will become more hard
    {
        if(pacmanX>newGhostX)
        {
            newGhostX++;
        }
        if(pacmanX<newGhostX)
        {
            newGhostX--;
        }
        if(pacmanY>newGhostY)
        {
            newGhostY++;
        }
        if(pacmanY<newGhostY)
        {
            newGhostY--;
        }
       if(board[newGhostX][newGhostY] == WALL&&board[newGhostX][newGhostY]==OBSTACLE&&board[newGhostX][newGhostY]==GHOST)
       {//because there are already objects at new position of ghost so now it will move randomely  
             int direction = rand() % 4;
            newGhostX = ghostX[i];
            newGhostY = ghostY[i];

        switch (direction) 
         {
            case 0:
                newGhostX--;
                break;
            case 1:
                newGhostX++;
                break;
            case 2:
                newGhostY--;
                break;
            case 3:
                newGhostY++;
                break;
         }
       }
           if (board[newGhostX][newGhostY] != WALL&&board[newGhostX][newGhostY]!=OBSTACLE&&board[newGhostX][newGhostY]!=GHOST)
            {
            char tem=board[newGhostX][newGhostY];
            board[ghostX[i]][ghostY[i]] = ' ';
            ghostX[i] = newGhostX;
            ghostY[i] = newGhostY;
            board[ghostX[i]][ghostY[i]] = GHOST;
            if(tem==DOT)
            {
            board[pastghostX[i]][pastghostY[i]]=DOT;
            pastghostX[i]=ghostX[i];
            pastghostY[i]=ghostY[i];
            }
             if(tem==PACMAN)
             {
                drawBoard();
                printf("game over !\nghost caught you");
                exit(0);
             }
        }
    }
    
    else {int direction = rand() % 4;
            newGhostX = ghostX[i];
            newGhostY = ghostY[i];

        switch (direction) 
        {
            case 0:
                newGhostX--;
                break;
            case 1:
                newGhostX++;
                break;
            case 2:
                newGhostY--;
                break;
            case 3:
                newGhostY++;
                break;
        }
        if (board[newGhostX][newGhostY] != WALL&&board[newGhostX][newGhostY]!=OBSTACLE&&board[newGhostX][newGhostY]!=GHOST) 
        {

            char tem=board[newGhostX][newGhostY];// for removing temporary dots to place ghost and after that it is placing dot at previous position of ghost
            board[ghostX[i]][ghostY[i]] = ' ';
            ghostX[i] = newGhostX;
            ghostY[i] = newGhostY;
            board[ghostX[i]][ghostY[i]] = GHOST;
            if(tem==DOT)
            {
            board[pastghostX[i]][pastghostY[i]]=DOT;
            pastghostX[i]=ghostX[i];
            pastghostY[i]=ghostY[i];
            }
             if(tem==PACMAN)
             {
                drawBoard();
                printf("game over !\nghost caught you");
                exit(0);
             }
        }
    }
  }
}


int main()
 {welcomeScreen();//callimg function
    
    srand((unsigned int)time(NULL));//every time new setup of game with new positions will come
    char input;
    
    int newX, newY;

    setupBoard();
    drawBoard();
int p=0;
    while (numDots > 0) 
    {
        p++;
        if (kbhit()) 
        {
            input = getch();

            switch (input) 
            {
                case 72://to move up
                    newX = pacmanX - 1;
                    newY = pacmanY;
                    break;
                case 80://for down
                    newX = pacmanX + 1;
                    newY = pacmanY;
                    break;
                case 75://left
                    newX = pacmanX;
                    newY = pacmanY - 1;
                    break;
                case 77://right
                    newX = pacmanX;
                    newY = pacmanY + 1;
                    break;
                default://eske alava koi input par koi change nahi
                    newX = pacmanX;
                    newY = pacmanY;
                    break;
            }

            if (board[newX][newY] != WALL)
             {
                updateBoard(newX, newY,p);
             }

            drawBoard();
        }
    }

    printf("\nGame Over! You won!\n");

    return 0;
}

